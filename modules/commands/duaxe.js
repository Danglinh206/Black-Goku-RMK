const path = require("path");
const { mkdirSync, writeFileSync, existsSync, createReadStream, readdirSync } = require("fs-extra")
const axios = require("axios")

module.exports.config = {
    name: "duaxe",
    version: "1.0.0",
    hasPermssion: 0,
    Rent: 2,
    credits: "...",
    description: "ƒêua xe l·∫•y top",
    commandCategory: "Tr√≤ Ch∆°i",
    usages: "[]",
    cooldowns: 0
};


module.exports.onLoad = async () => {
    const dir = __dirname + `/Tr√≤_ch∆°i/duaxe/datauser/`;
    const _dir = __dirname + `/Tr√≤_ch∆°i/duaxe/datauser/`;
    const __dir = __dirname + `/Tr√≤_ch∆°i/duaxe/cache/`;
    if (!existsSync(dir)) mkdirSync(dir, { recursive: true });
    if (!existsSync(_dir)) mkdirSync(_dir, { recursive: true });
    if (!existsSync(__dir)) mkdirSync(__dir, { recursive: true });
    return;
}

module.exports.checkPath = function (type, senderID) {
    const pathGame = path.join(__dirname, 'Tr√≤_ch∆°i','duaxe', 'datauser', `${senderID}.json`);
    const pathGame_1 = require("./Tr√≤_ch∆°i/duaxe/datauser/" + senderID + '.json');
    if (type == 1) return pathGame
    if (type == 2) return pathGame_1
}

module.exports.image = async function(link) {
    var images = [];
    let download = (await axios.get(link, { responseType: "arraybuffer" } )).data; 
        writeFileSync( __dirname + `/Tr√≤_ch∆°i/duaxe/cache/duaxe.png`, Buffer.from(download, "utf-8"));
        images.push(createReadStream(__dirname + `/Tr√≤_ch∆°i/duaxe/cache/duaxe.png`));
    return images
}

module.exports.run = async function ({ api, event, args, client,Threads,__GLOBAL, Users, Currencies,getText }) {
   const { senderID, messageID, threadID } = event;
     const axios = require('axios');
    const request = require('request');
    const fs = require('fs-extra');
    const pathData = path.join(__dirname, 'Tr√≤_ch∆°i','duaxe', 'datauser', `${senderID}.json`);
    switch (args[0]) {
        case 'register':
        case '-r': {
            const nDate = new Date().toLocaleString('vi-VN', {
                timeZone: 'Asia/Ho_Chi_Minh'
            });
            if (!existsSync(pathData)) {
                var obj = {};
                obj.name = (await Users.getData(senderID)).name;
                obj.ID = senderID;
                obj.shield = 3
                obj.coins = 20000
                obj.Island = {};
                obj.Island.level = 1
                obj.Island.coinsLV = 200
                obj.Island.data = {};
                obj.Island.data.tower = 0
                obj.Island.data.tree = 0
                obj.Island.data.pool = 0
                obj.Island.data.pet = 0
                obj.spin = 20
                obj.timeRegister = nDate
                writeFileSync(pathData, JSON.stringify(obj, null, 4));
                return api.sendMessage("üèé ƒêƒÉng k√≠ th√†nh c√¥ng ti·∫øn v√†o ƒë·∫•u tr∆∞·ªùng", threadID, messageID);
            } else return api.sendMessage("‚öîüèé B·∫°n ƒë√£ c√≥ trong c∆° s·ªü d·ªØ li·ªáu", threadID, messageID);

        }
        case 'spin': {
            if (!existsSync(pathData)) {
                return api.sendMessage({body: `B·∫°n ch∆∞a ƒëƒÉng k√≠ game!`, attachment: await this.image('https://i.imgur.com/XZITZoN.gif')}, threadID, messageID);
            }
            if(this.checkPath(2, senderID).spin == 0) return api.sendMessage('¬ª B·∫°n ƒë√£ h·∫øt l∆∞·ª£t quay vui l√≤ng mua th√™m l∆∞·ª£t ho·∫∑c ƒë·ª£i 5phut ƒë·ªÉ h·ªá th·ªëng t·ª± t·∫∑ng b·∫°n th√™m l∆∞·ª£t quay', threadID, messageID);
            this.checkPath(2, senderID).spin = parseInt(this.checkPath(2, senderID).spin) - 1;
            writeFileSync(this.checkPath(1, senderID), JSON.stringify(this.checkPath(2, senderID), null, 4));
            var items = [`${this.checkPath(2, senderID).Island.level * 1000} coins`, `${this.checkPath(2, senderID).Island.level * 3000} coins`, `${this.checkPath(2, senderID).Island.level * 5000} coins`, 'B·∫°n ƒë√£ quay tr√∫ng xe ƒë·∫°p', 'Si√™u xe', ' N√¢ng c·∫•p ƒë·ªông c∆°', '1 l∆∞·ª£t quay', '2 l∆∞·ª£t quay', '7 l∆∞·ª£t quay', '5 l∆∞·ª£t quay'];
            var getItem = items[Math.floor(Math.random() * items.length)];
            var i = this.getSpin(items, getItem, senderID);
            api.sendMessage({body: `Ch√∫c m·ª´ng b·∫°n quay tr√∫ng : ${getItem}`, attachment: await this.image('https://i.imgur.com/XZITZoN.gif')}, threadID, messageID);
            await new Promise(resolve => setTimeout(resolve, 1000));
            const data = readdirSync(__dirname + `/Tr√≤_ch∆°i/duaxe/datauser`);
            if(i == 3) {
                if(data.length < 4) return api.sendMessage(`C·∫ßn √≠t nh·∫•t c√≥ 3 ng∆∞·ªùi ch∆°i tr√™n server ƒë·ªÉ tr·ªôm nguy√™n li·ªáu xe`, threadID, messageID);
                const dem = [];
                for (let i of data) { 
                    if(i != `${senderID}.json`) {
                        dem.push(require(`./Tr√≤_ch∆°i/duaxe/datauser/${i}`));
                    }
                }
                dem.sort((a, b) => a.coins + b.coins);
                var msg = `S·ªë ti·ªÅn cao nh·∫•t l√†: ${dem[0].coins / 2}\n`
                const randomIndex = dem.sort(function() { return .5 - Math.random() });
                for(var i = 0; i < 3; i ++) {
                    msg += `${i+1}. ${randomIndex[i].name} - ƒê·ªông c∆° level ${randomIndex[i].Island.level}\n`
                }
                msg += 'Vui l√≤ng reply v·ªõi l·ª±a ch·ªçn b·∫°n mu·ªën tr·ªôm nguy√™n li·ªáu xe'
                return api.sendMessage(`==========\n${msg}`, threadID, (error, info) => {
                    global.client.handleReply.push({
                        name: this.config.name,
                        messageID: info.messageID,
                        author: event.senderID,
                        type: "steal",
                        dem,
                        randomIndex
                    })
                }, messageID);
            }
            else if(i == 5) {
                if(data.length < 4) return api.sendMessage(`C·∫ßn √≠t nh·∫•t c√≥ 3 ng∆∞·ªùi ch∆°i tr√™n server ƒë·ªÉ t·∫•n c√¥ng ng∆∞·ªùi ch∆°i`, threadID, messageID);
                var msgf = `[====ATTACK====]\n`, number = 1, p = [];
                for (let i of data) { 
                    if(i != `${senderID}.json`) {
                        var o = require(`./Tr√≤_ch∆°i/duaxe/datauser/${i}`);
                        p.push(o)
                        msgf += `${number++}. ${o.name} - ƒê·∫£o level ${o.Island.level}\n`
                    }
                }
                return api.sendMessage(msgf, threadID, (error, info) => {
                    global.client.handleReply.push({
                        name: this.config.name,
                        messageID: info.messageID,
                        author: event.senderID,
                        type: "attack",
                        p
                    })
                }, messageID);
            }
            break;
        }
        case 'build': 
        case 'xaydung': {
            if (!existsSync(pathData)) {
                return api.sendMessage({body: "B·∫°n ch∆∞a ƒëƒÉng k√≠ game!", attachment: await this.image('https://i.imgur.com/clX87Qt.jpg')}, threadID, messageID);
            }
            var a = require(`./Tr√≤_ch∆°i/duaxe/datauser/${senderID}.json`);
            return api.sendMessage(`¬ª B·∫°n mu·ªën n√¢ng c·∫•p g√¨ ·ªü Garaxe\n1. ƒê·ªông c∆° - ${a.Island.coinsLV * (a.Island.data.tower + 1)} coins (${a.Island.data.tower}/50)\n2. Mui xe - ${a.Island.coinsLV * (a.Island.data.tree + 1)} coins(${a.Island.data.tree}/50)\n3.Nguy√™n li·ªáu t√°i ch·∫ø - ${a.Island.coinsLV * (a.Island.data.pool + 1)} coins (${a.Island.data.pool}/50)\n4.Mini Boost - ${a.Island.coinsLV * (a.Island.data.pet + 1)} coins (${a.Island.data.pet}/50)\n==============`, threadID, (error, info) => {
                global.client.handleReply.push({
                    name: this.config.name,
                    messageID: info.messageID,
                    author: event.senderID,
                    type: "build"
                })
            }, messageID);
        }
        case 'shop': {
            if (!existsSync(pathData)) {
                return api.sendMessage({body: "B·∫°n ch∆∞a ƒëƒÉng k√≠ game!", attachment: await this.image('https://i.imgur.com/z4Q5tWp.jpg')}, threadID, messageID);
            }
     return api.sendMessage({body: `‚îÄ‚îÄ [ Shop ] ‚îÄ‚îÄ  \n\nüê∏Danh s√°ch xe ƒëua b·∫°n c√≥ th·ªÉ mua\n[üèé1]. Song th·∫ßn sinh ƒë√¥i\n[üèé2].S-LIGHT\n[üèé3].ETARNA\n[üèé4].S√≥i ƒê·ªãa Ng·ª•c\n[üèé5].V·∫øt Gi√≥\n[üèé6].Tia Ch√≥p\n[üèé7].Lamborini\n[üèé8].H√†o Quang\n[üèé9].B√° Ch·ªß\n[‚≠êÔ∏è] H√£y reply tin nh·∫Øn bot v√† k√®m theo s·ªë`, attachment: await this.image('https://i.imgur.com/z4Q5tWp.jpg')}, threadID, (error, info) => {
                global.client.handleReply.push({
                    name: this.config.name,
                    messageID: info.messageID,
                    author: event.senderID,
                    type: "shop"
                })
            }, messageID);
        }
        case 'ƒëua': {
            if (!existsSync(pathData)) {
                return api.sendMessage({body: "B·∫°n ch∆∞a ƒëƒÉng k√≠ game!", attachment: await this.image('https://i.imgur.com/lo8wFLT.jpg')}, threadID, messageID);
            }
     return api.sendMessage({body: `‚îÄ‚îÄ [ CH·ªåN MAPS THI ƒê·∫§U ] ‚îÄ‚îÄ  \n\n‚ù§Ô∏è Ch·ªçn maps ƒë·ªÉ thi ƒë·∫•u\n[üó∫1]. R·ª´ng T√†n Ph√°\n[üó∫2].L√¥ng M√¥n T√¢n Xu√¢n\n[üó∫3].Ng√¥i Nh√† Linh Thi√™n\n`, attachment: await this.image('https://i.imgur.com/9YaNyZA.jpg')}, threadID, (error, info) => {
                global.client.handleReply.push({
                    name: this.config.name,
                    messageID: info.messageID,
                    author: event.senderID,
                    type: "ƒëua"
                })
            }, messageID);
        }
        case 'me':
        case 'info': {
            if (!existsSync(pathData)) {
                return api.sendMessage({body: "B·∫°n ch∆∞a ƒëƒÉng k√≠ game!", attachment: await this.image('https://i.imgur.com/R5eyoyZ.jpg')}, threadID, messageID);
            }
            var a = require(`./Tr√≤_ch∆°i/duaxe/datauser/${senderID}.json`);
            return api.sendMessage(`‚≠êÔ∏è KHO ƒê·ªí N√ÇNG C·∫§P ‚≠êÔ∏è\n- ... ${a.Island.level}\n- S·ªë l∆∞·ª£t quay c√≤n l·∫°i: ${a.spin}\n- Coins: ${a.coins}\n- ƒê·ªòNG C∆†:\n‚Ä¢ ... (${a.Island.data.tower}/50)\n‚Ä¢ ... (${a.Island.data.tree}/50)\n‚Ä¢ ... (${a.Island.data.pool}/50)\n‚Ä¢ ... (${a.Island.data.pet}/50)`, threadID, messageID);
        }
        case 'top': {
            if (!existsSync(pathData)) {
                return api.sendMessage({body: "B·∫°n ch∆∞a ƒëƒÉng k√≠ game!", attachment: await this.image('https://i.imgur.com/R5eyoyZ.jpg')}, threadID, messageID);
            }
            const data = readdirSync(__dirname + `/Tr√≤_ch∆°i/duaxe/datauser`);
            if(data.length < 3) return api.sendMessage(`C·∫ßn √≠t nh·∫•t c√≥ 3 ng∆∞·ªùi ch∆°i tr√™n server ƒë·ªÉ xem top`, threadID, messageID);
            var p = []
            for (let i of data) { 
                var o = require(`./Tr√≤_ch∆°i/duaxe/datauser/${i}`);
                p.push(o)
                msgf += `${number++}. ${o.name} - ƒê·∫£o level ${o.Island.level}\n`
            }
            p.sort((a, b) => b.Island.level - a.Island.level);
            var msg = '===TOP 3 CHU·ªíNG LEVEL CAO NH·∫§T===\n'
            for(var i = 0; i < 3; i++) {
                msg += `${i+1}. ${p[i].name} v·ªõi ƒë·∫£o level ${p[i].Island.level}\n`
            }
            return api.sendMessage(msg, threadID, messageID);
        }
        default: {
            return api.sendMessage({body: `===[ ƒêUA XE S1 ]===\n¬ª R: ƒêƒÉng k√≠\n¬ª SPIN: V√≤ng quay game\n¬ª BUILD: N√¢ng c·∫•p ƒë·ªông c∆°\n¬ª SHOP: Shop mua s√∫ng\n¬ª INFO: Xem th√¥ng tin v·ªÅ b·∫°n\n¬ª TOP: Xem top level tr√™n server\n¬ª CHANGE: Quy ƒë·ªïi ti·ªÅn c·ªßa bot sang ti·ªÅn game v√† ng∆∞·ª£c l·∫°i`, attachment: await this.image('https://i.imgur.com/RkCdr8r.jpg')}, threadID, messageID);
        }
    }
}
module.exports.handleReply = async ({ event, api, Currencies, handleReply, Users, getText}) => {

  const { body, threadID, messageID, senderID } = event;
  const axios = require('axios');
  const request = require('request');
  const fs = require("fs");
    switch (handleReply.type) {
        case 'build': {
            var a = require(`./Tr√≤_ch∆°i/duaxe/datauser/${senderID}.json`);
            var l = ['tower', 'tree', 'pool', 'pet']
            if(a.coins < a.Island.coinsLV * (a.Island.data[l[parseInt(body) - 1]] + 1)) return api.sendMessage(`B·∫°n kh√¥ng ƒë·ªß s·ªë coins trong game ƒë·ªÉ x√¢y d·ª±ng!`, threadID, messageID);
            a.coins = a.Island.coinsLV * (a.Island.data[l[parseInt(body) - 1]] + 1);
            await Currencies.decreaseMoney(senderID, a.Island.coinsLV * (a.Island.data[l[parseInt(body) - 1]] + 1));
            api.unsendMessage(handleReply.messageID)
            if(body == 1) {
                if(a.Island.data.tower == 50) return api.sendMessage('C·∫•p b·∫≠c khu v·ª±c n√†y ƒëang ·ªü m·ª©c t·ªëi ƒëa n√™n kh√¥ng th·ªÉ x√¢y d·ª±ng', threadID, messageID);
                a.Island.data.tower = a.Island.data.tower + 10;
                api.sendMessage(`X√¢y d·ª±ng th√†nh c√¥ng: ${a.Island.data.tower}/50`, threadID, messageID);
            }
            if(body == 2) {
                if(a.Island.data.tree == 50) return api.sendMessage('C·∫•p b·∫≠c khu v·ª±c n√†y ƒëang ·ªü m·ª©c t·ªëi ƒëa n√™n kh√¥ng th·ªÉ x√¢y d·ª±ng', threadID, messageID);
                a.Island.data.tree = a.Island.data.tree + 10;
                api.sendMessage(`X√¢y d·ª±ng th√†nh c√¥ng: ${a.Island.data.tree}/50`, threadID, messageID);
            }
            if(body == 3) {
                if(a.Island.data.pool == 50) return api.sendMessage('C·∫•p b·∫≠c khu v·ª±c n√†y ƒëang ·ªü m·ª©c t·ªëi ƒëa n√™n kh√¥ng th·ªÉ x√¢y d·ª±ng', threadID, messageID);
                a.Island.data.pool = a.Island.data.pool + 10;
                api.sendMessage(`X√¢y d·ª±ng th√†nh c√¥ng: ${a.Island.data.pool}/50`, threadID, messageID);
            }
            if(body == 4) {
                if(a.Island.data.pet == 50) return api.sendMessage('C·∫•p b·∫≠c khu v·ª±c n√†y ƒëang ·ªü m·ª©c t·ªëi ƒëa n√™n kh√¥ng th·ªÉ x√¢y d·ª±ng', threadID, messageID);
                a.Island.data.pet = a.Island.data.pet + 10;
                api.sendMessage(`N√¢ng c·∫•p th√†nh c√¥ng: ${a.Island.data.pet}/50`, threadID, messageID);
            }
            if(a.Island.data.tower == 50 && a.Island.data.tree == 50 && a.Island.data.pool == 50 && a.Island.data.pet == 50) {
                await new Promise(resolve => setTimeout(resolve, 1000));
                api.sendMessage(`N√¢ng c·∫•p c·ªßa b·∫°n ƒë√£ ƒë·∫°t ƒë∆∞·ª£c c·∫•p t·ªëi ƒëa!\nB·∫°n s·∫Ω ƒë∆∞·ª£c n√¢ng c·∫•p l√™n ƒë·ªông c∆° ${(a.Island.level) + 1}`, threadID, messageID);
                a.Island.level = a.Island.level + 1;
                a.Island.coinsLV = a.Island.coinsLV + 100;
                a.Island.data.tower = 0;
                a.Island.data.tree = 0;
                a.Island.data.pool = 0;
                a.Island.data.pet = 0;
            }
            return writeFileSync(this.checkPath(1, senderID), JSON.stringify(a, null, 4));
        }
        case 'shop': {
            if(body == 1) {
                return api.sendMessage({body: `‚≠êÔ∏è MUA TH√ÄNH C√îNG ‚≠êÔ∏è\n[üöò]T√™n : Song th·∫ßn sinh ƒë√¥i
[üçÅ]Th√¥ng Tin : b√≥ng t·ªëi th·ªùi gian
T·ªëc ƒë·ªô: 1.8km/h t·ªëi ƒëa
S·ª©c m·∫°nh boost: 2.3
Drift: 61%
S·ª©c m·∫°nh t√¥ng: 58%`, attachment: await this.image('https://i.imgur.com/UOgDVlh.jpg')}, threadID, messageID);
            }
            else if(body == 2) {
                return api.sendMessage({body: `‚≠êÔ∏è MUA TH√ÄNH C√îNG ‚≠êÔ∏è\n[üöò]T√™n : S-LIGHT
[üçÅ]Th√¥ng Tin : B√° ch·ªß tr·ªùi ƒë·∫•t
T·ªëc ƒë·ªô: 1.9/h t·ªëi ƒëa
S·ª©c m·∫°nh boost: 2.9
Drift: ${huhong}%
S·ª©c m·∫°nh t√¥ng: ${huhong}%`, attachment: await this.image('https://i.imgur.com/t7wrAX1.jpg')}, threadID, messageID);
            }
            else if(body == 3) {

                return api.sendMessage({body: `‚≠êÔ∏è MUA TH√ÄNH C√îNG ‚≠êÔ∏è\n[üöò]T√™n : ETARNA
[üçÅ]Th√¥ng Tin : L·ª≠a h·ªßy di·ªát 
T·ªëc ƒë·ªô: 2.1/h t·ªëi ƒëa
S·ª©c m·∫°nh boost: 3.1
Drift: 31%
S·ª©c m·∫°nh t√¥ng: 19%`, attachment: await this.image('https://i.imgur.com/jkkHbS3.jpg')}, threadID, messageID);
             }
            else if(body == 4) {
                return api.sendMessage({body: `‚≠êÔ∏è MUA TH√ÄNH C√îNG ‚≠êÔ∏è\n[üöò]T√™n : S√≥i ƒê·ªãa Ng·ª•c
[üçÅ]Th√¥ng Tin : M√£nh th√∫ t·ªëi th∆∞·ª£ng
T·ªëc ƒë·ªô: 3.9/h t·ªëi ƒëa
S·ª©c m·∫°nh boost: 7.2
Drift: 59%
S·ª©c m·∫°nh t√¥ng: 88%`, attachment: await this.image('https://i.imgur.com/8emkSZg.jpg')}, threadID, messageID);
            }
            else if(body == 5) {
                return api.sendMessage({body: `‚≠êÔ∏è MUA TH√ÄNH C√îNG ‚≠êÔ∏è\n[üöò]T√™n : V·∫øt Gi√≥
[üçÅ]Th√¥ng Tin : Gi√≥ Thi√™n Tai 
T·ªëc ƒë·ªô: 1.5/h t·ªëi ƒëa
S·ª©c m·∫°nh boost: 3.2
Drift: 37%
S·ª©c m·∫°nh t√¥ng: 32%`, attachment: await this.image('https://i.imgur.com/5w8wvOM.jpgg')}, threadID, messageID);
            }
            else if(body == 6) {
                return api.sendMessage({body: `‚≠êÔ∏è MUA TH√ÄNH C√îNG ‚≠êÔ∏è
[üöò] T√™n: Tia ch√≥p 
[üçÅ] Th√¥ng Tin: ƒêi·ªán Ma Qu√°i
T·ªëc ƒë·ªô: 3.4km/h t·ªëi ƒëa
S·ª©c m·∫°nh boost: 1.3
Drift: 44%
S·ª©c m·∫°nh t√¥ng: 11%`, attachment: await this.image('https://i.imgur.com/8KQOATL.jpg')}, threadID, messageID);
            }
            else if(body == 7) {
                return api.sendMessage({body: `‚≠êÔ∏è MUA TH√ÄNH C√îNG ‚≠êÔ∏è
[üöò] T√™n: Lamborini 
[üçÅ] Th√¥ng Tin: B·∫•t b·∫°i ng√†n c√¢n
T·ªëc ƒë·ªô: 7.9km/h t·ªëi ƒëa
S·ª©c m·∫°nh boost: 9.2
Drift: 96%
S·ª©c m·∫°nh t√¥ng: 98%`, attachment: await this.image('https://i.imgur.com/WFHExvo.jpg')}, threadID, messageID);
            }
            else if(body == 8) {
                return api.sendMessage({body: `‚≠êÔ∏è MUA TH√ÄNH C√îNG ‚≠êÔ∏è
[üöò] T√™n: H√†o quang
[üçÅ] Th√¥ng Tin: √Ånh s√°ng ki√™u g·ªçi
T·ªëc ƒë·ªô: 8.9km/h t·ªëi ƒëa
S·ª©c m·∫°nh boost: 8.9
Drift: 87%
S·ª©c m·∫°nh t√¥ng: 79%`, attachment: await this.image('https://i.imgur.com/Au9cojd.jpg')}, threadID, messageID);
            }
            else if(body == 9) {
                return api.sendMessage({body: `‚≠êÔ∏è MUA TH√ÄNH C√îNG ‚≠êÔ∏è
[üöò] T√™n: B√° ch·ªß
[üçÅ] Th√¥ng Tin: S·ª©c m·∫°nh t√†n ph√°
T·ªëc ƒë·ªô: 10.1km/h t·ªëi ƒëa
S·ª©c m·∫°nh boost: 7.1
Drift: 7%
S·ª©c m·∫°nh t√¥ng: 100%`, attachment: await this.image('https://i.imgur.com/HfK8lJD.jpg')}, threadID, messageID);
            }
            else {
                return api.sendMessage('L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!', threadID, messageID);
            }
        }

         case 'mua': {
            if(body == 1) {
                return api.sendMessage('Vui l√≤ng reply tin nh·∫Øn n√†y v·ªõi s·ªë ti·ªÅn b·∫°n mu·ªën ƒë·ªïi! Chi·∫øt kh·∫•u 0%', threadID, (error, info) => {
                    global.client.handleReply.push({
                        name: this.config.name,
                        messageID: info.messageID,
                        author: event.senderID,
                        type: "botcoins"
                    })
                }, messageID);
            }
            else if(body == 2) {
                return api.sendMessage('Vui l√≤ng reply tin nh·∫Øn n√†y v·ªõi s·ªë ti·ªÅn b·∫°n mu·ªën ƒë·ªïi! Chi·∫øt kh·∫•u 0%', threadID, (error, info) => {
                    global.client.handleReply.push({
                        name: this.config.name,
                        messageID: info.messageID,
                        author: event.senderID,
                        type: "coinsbot"
                    })
                }, messageID);
            }
            else if(body == 3) {
                return api.sendMessage('Vui l√≤ng reply tin nh·∫Øn n√†y v·ªõi s·ªë l∆∞·ª£t quay b·∫°n mu·ªën mua! (10 l∆∞·ª£t quay 2000$)', threadID, (error, info) => {
                    global.client.handleReply.push({
                        name: this.config.name,
                        messageID: info.messageID,
                        author: event.senderID,
                        type: "spinn"
                    })
                }, messageID);
            }
            else {
                return api.sendMessage('L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!', threadID, messageID);
            }
        }
        case 'ƒëua': {
            if(body == 1) {
  var coinduaxe = Math.floor(Math.random() * 80000) + 10000;
  var huhong = Math.floor(Math.random() * 90) + 20;
                return api.sendMessage({body: `‚≠êÔ∏è THI ƒê·∫§U ‚≠êÔ∏è\n[üó∫] MAPS: R·ª´ng T√†n Ph√°.\n[üèÜ] Ch√∫c M·ª´ng b·∫°n ƒë√£ chi·∫øn th·∫Øng ƒë·ªëi th·ªß\n¬ª Gi·∫£i th∆∞·ªüng c·ªßa b·∫°n l√†: ${coinduaxe}$\n¬ª Xe H·ªèng: ${huhong}%`, attachment: await this.image('https://i.imgur.com/VyNAU4R.jpg')}, threadID, messageID);
        }
            else if(body == 2) {
               var coinduaxe = Math.floor(Math.random() * 80000) + 10000;
  var huhong = Math.floor(Math.random() * 90) + 20;
                return api.sendMessage({body: `‚≠êÔ∏è THI ƒê·∫§U ‚≠êÔ∏è\n[üó∫] MAPS: L√¥ng M√¥n T√¢m Xu√¢n.\n[üèÜ] Ch√∫c M·ª´ng b·∫°n ƒë√£ chi·∫øn th·∫Øng ƒë·ªëi th·ªß\n¬ª Gi·∫£i th∆∞·ªüng c·ªßa b·∫°n l√†: ${coinduaxe}$\n¬ª Xe H·ªèng: ${huhong}%`, attachment: await this.image('https://i.imgur.com/NHbz90K.jpg')}, threadID, messageID);
        }
            else if(body == 3) {
   var coinduaxe = Math.floor(Math.random() * 80000) + 10000;
  var huhong = Math.floor(Math.random() * 90) + 20;
                return api.sendMessage({body: `‚≠êÔ∏è THI ƒê·∫§U ‚≠êÔ∏è\n[üó∫] MAPS: Ng√¥i Nh√† Linh Thi√™n.\n[üèÜ] Ch√∫c M·ª´ng b·∫°n ƒë√£ chi·∫øn th·∫Øng ƒë·ªëi th·ªß\n¬ª Gi·∫£i th∆∞·ªüng c·ªßa b·∫°n l√†: ${coinduaxe}$\n¬ª Xe H·ªèng: ${huhong}%`, attachment: await this.image('https://i.imgur.com/93XPPtv.jpg')}, threadID, messageID);
            }
        }        
        case 'spinn': {
            await checkMoney(senderID, parseInt(body));
            api.unsendMessage(handleReply.messageID)
            await Currencies.decreaseMoney(senderID, parseInt(body));
            a.spin = a.spin + parseInt(body)
            writeFileSync(this.checkPath(1, senderID), JSON.stringify(a, null, 4));
            return api.sendMessage(`Mua th√†nh c√¥ng ${body} l∆∞·ª£t quay (${parseInt(body) * 200}$`, threadID, messageID);
        }
        case 'botcoins': {
            var a = require(`./Tr√≤_ch∆°i/duaxe/datauser/${senderID}.json`);
            await checkMoney(senderID, parseInt(body));
            api.unsendMessage(handleReply.messageID)
            await Currencies.decreaseMoney(senderID, parseInt(body));
            a.coins = a.coins + parseInt(body)
            writeFileSync(this.checkPath(1, senderID), JSON.stringify(a, null, 4));
            return api.sendMessage(`N·∫°p th√†nh c√¥ng ${body} coins v√†o game!`, threadID, messageID);
        }
        case 'coinsbot': {
            var a = require(`./Tr√≤_ch∆°i/duaxe/datauser/${senderID}.json`);
            if(a.coins < parseInt(body)) return api.sendMessage('B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch n√†y!', threadID, messageID);
            api.unsendMessage(handleReply.messageID)
            await Currencies.increaseMoney(senderID, parseInt(body));
            a.coins = a.coins - parseInt(body)
            writeFileSync(this.checkPath(1, senderID), JSON.stringify(a, null, 4));
            return api.sendMessage(`R√∫t th√†nh c√¥ng ${body} coins v·ªÅ t√†i kho·∫£n bot!`, threadID, messageID);
        }
    }
    async function checkMoney(senderID, maxMoney) {
        var i, w;
        i = (await Currencies.getData(senderID)) || {};
        w = i.money || 0
        if (w < parseInt(maxMoney)) return api.sendMessage('B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch n√†y!', threadID, messageID);
    }
}
module.exports.getSpin = function (items, getItem, senderID) {
    const path = this.checkPath(1, senderID)
    var pathData = this.checkPath(2, senderID)
    var i = items.findIndex(index => index == getItem);
    if(i == 0) pathData.coins = parseInt(pathData.coins) + pathData.Island.level * 1000
    if(i == 1) pathData.coins = parseInt(pathData.coins) + pathData.Island.level * 3000
    if(i == 2) pathData.coins = parseInt(pathData.coins) + pathData.Island.level * 5000
    if(i == 4) {
        if(pathData.shield != 3) {
            pathData.spin = parseInt(pathData.spin) + 1
            pathData.shield = parseInt(pathData.shield) + 1;
        }
    }
    if(i == 6) pathData.spin = parseInt(pathData.spin) + 1
    if(i == 7) pathData.spin = parseInt(pathData.spin) + 2
    if(i == 8) pathData.spin = parseInt(pathData.spin) + 5
    writeFileSync(path, JSON.stringify(pathData, null, 4));
    return i
}